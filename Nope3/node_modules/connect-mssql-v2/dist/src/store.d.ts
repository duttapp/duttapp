import { config as SQLConfig, ConnectionPool } from 'mssql';
import { SessionData, Store as ExpressSessionStore } from 'express-session';
export interface StoreOptions {
    /**
     * Table to use as session store. Default: `[sessions]`
     */
    table?: string;
    /**
     * (Time To Live) Determines the expiration date. Default: `1000 * 60 * 60 * 24` (24 hours)
     */
    ttl?: number;
    /**
     * Determines if expired sessions should be autoremoved or not.
     * If value is `true` then a new function, `destroyExpired()`,
     * will autodelete expired sessions on a set interval. Default: `false`
     */
    autoRemove?: boolean;
    /**
     * Sets the timer interval for each call to `destroyExpired()`.
     * Default: `1000 * 60 * 10` (10 min)
     */
    autoRemoveInterval?: number;
    /**
     * Is the callback function for `destroyExpired()`. Default: `undefined`
     */
    autoRemoveCallback?: (props: any) => any;
    /**
     * Determines if we are to use the `GETUTCDATE` instead of `GETDATE` Default: `true`
     */
    useUTC?: boolean;
}
export interface MSSQLStoreDef {
    config: SQLConfig;
    options?: StoreOptions;
    databaseConnection: ConnectionPool | null;
    all(callback: (err: any, session?: {
        [sid: string]: SessionData;
    } | null) => void): Promise<void>;
    get(sid: string, callback: (err: any, session?: SessionData | null) => void): Promise<void>;
    set(sid: string, currentSession: SessionData, callback?: (err?: any) => void): Promise<void>;
    touch(sid: string, currentSession: SessionData, callback?: (err?: any) => void): Promise<void>;
    destroy(sid: string, callback?: (err?: any) => void): Promise<void>;
    destroyExpired(callback?: Function): Promise<void>;
    length(callback: (err: any, length?: number | null) => void): Promise<void>;
    clear(callback?: (err?: any) => void): Promise<void>;
}
/**
 * ! DEPRECATION WARNING
 * ! This will be deprecated in v4.0 in favor of MSSQLStoreDef
 */
export interface IMSSQLStore extends MSSQLStoreDef {
}
declare class MSSQLStore extends ExpressSessionStore implements MSSQLStoreDef, IMSSQLStore {
    table: string;
    ttl: number;
    autoRemove: boolean;
    autoRemoveInterval: number;
    autoRemoveCallback?: (props?: any) => any;
    useUTC: boolean;
    config: SQLConfig;
    databaseConnection: ConnectionPool;
    constructor(config: SQLConfig, options?: StoreOptions);
    /**
     * Initializes connection to the database and emits connect on success or error on failure
     */
    private initializeDatabase;
    /**
     * Verifies database connection has been established, and if not, will initialize connection
     */
    private dbReadyCheck;
    /**
     * Verify session.cookie.expires is not a boolean. If so, use current time along with
     * ttl else return session.cookie.expires
     * @param sessionCookie
     */
    private getExpirationDate;
    /**
     * Runs the provided query statement against the database.
     * Returns T if expectReturn is true else returns null
     * @param props
     */
    private queryRunner;
    /**
     * Attachs sessionError event listener and emits on error on any
     * store error and includes method where error occured
     * @param method
     * @param error
     * @param callback
     */
    errorHandler(method: keyof MSSQLStoreDef, error: any, callback?: any): any;
    /**
     * Attempt to fetch all sessions
     * @param callback
     */
    all(callback: (err: any, session?: {
        [sid: string]: SessionData;
    } | null) => void): Promise<void>;
    /**
     * Attempt to fetch session the given sid
     * @param sid
     * @param callback
     */
    get(sid: string, callback: (err: any, session?: SessionData | null) => void): Promise<void>;
    /**
     * Commit the given session object associated with the given sid
     * @param sid
     * @param currentSession
     * @param callback
     */
    set(sid: string, currentSession: SessionData, callback?: (err?: any) => void): Promise<void>;
    /**
     * Update the expiration date of the given sid
     * @param sid
     * @param data
     * @param callback
     */
    touch(sid: string, currentSession: SessionData, callback: (err?: any) => void): Promise<void>;
    /**
     * Destroy the session associated with the given sid
     * @param sid
     * @param callback
     */
    destroy(sid: string, callback?: (err?: any) => void): Promise<void>;
    /**
     * Destroy expired sessions
     * @param callback
     */
    destroyExpired(callback?: Function): Promise<void>;
    /**
     * Fetch total number of sessions
     * @param callback
     */
    length(callback: (err: any, length: number) => void): Promise<void>;
    /**
     * Clear all sessions
     * @param callback
     */
    clear(callback: (err?: any) => void): Promise<void>;
}
export default MSSQLStore;
